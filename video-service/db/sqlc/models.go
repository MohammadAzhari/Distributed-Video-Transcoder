// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type VideoStatus string

const (
	VideoStatusNew        VideoStatus = "new"
	VideoStatusProcessing VideoStatus = "processing"
	VideoStatusDone       VideoStatus = "done"
)

func (e *VideoStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VideoStatus(s)
	case string:
		*e = VideoStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for VideoStatus: %T", src)
	}
	return nil
}

type NullVideoStatus struct {
	VideoStatus VideoStatus `json:"video_status"`
	Valid       bool        `json:"valid"` // Valid is true if VideoStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVideoStatus) Scan(value interface{}) error {
	if value == nil {
		ns.VideoStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VideoStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVideoStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VideoStatus), nil
}

type Video struct {
	ID        uuid.UUID   `json:"id"`
	Filename  string      `json:"filename"`
	Status    VideoStatus `json:"status"`
	WorkerIp  pgtype.Text `json:"worker_ip"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
	Scales    []string    `json:"scales"`
}
